CountDownLatch


#+begin_src java
public CountDownLatch(int count) {
    if (count < 0) throw new IllegalArgumentException("count < 0");
    this.sync = new Sync(count);
}

public void await() throws InterruptedException {
    sync.acquireSharedInterruptibly(1);
}

private static final class Sync extends AbstractQueuedSynchronizer {
    private static final long serialVersionUID = 4982264981922014374L;

    Sync(int count) {
	setState(count);
    }

    int getCount() {
	return getState();
    }

    protected int tryAcquireShared(int acquires) {
	return (getState() == 0) ? 1 : -1;
    }

    protected boolean tryReleaseShared(int releases) {
	// Decrement count; signal when transition to zero
	for (;;) {
	    int c = getState();
	    if (c == 0)
		return false;
	    int nextc = c - 1;
	    if (compareAndSetState(c, nextc))
		return nextc == 0;
	}
    }
}
#+end_src

* wait impl
#+begin_src java
// AbstractQueuedSynchronizer.java
acquire(null, arg, true, true, false, 0L)
#+end_src
