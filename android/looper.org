* simplize impl
#+BEGIN_SRC java
  void runTheIdleHandlers() {
      for (var idleHandler in idleHandlers) {
          bool keep = idleHandler.queryIdle();
          if (not keep) {
              // copy before loop so we can delete. simplifier here.
              idleHandler.remove(idleHandler);
          }
      }
  }

  void loop() {
      MessageQueue mq = this.mq;
      for (;;) {
          Message msg = mq.next();
          if (msg == null) {
              // no message menas the message queu is quiting.
              return;
          }
          // msg.target is the handler.
          msg.target.dispatchMessage(msg);


          if (noMessageToExecute() || msgIsWatting) {
              runTheIdleHandlers();
          }
      }
  }
#+END_SRC

So the key is mq.next();

#+BEGIN_SRC java
  class MessageQueue {
      /**
         We response for return the msg in right(msg execute) time
       ,*/
      public next() {
          int nextPoolTimeMillis = 0;
          // find one
          for (;;) {
              // maybe wakeup by nativeWakeup();
              nativePoolOnce(ptr, nextPoolTimeMillis);


              // do something with the idle handler
          }
      }

      public void enqueuMessage(Message msg) {
          needWakeUp = mBlocked;
          if (msg.when <= headerMsg.when){
              msg.next = headerMsg;
          } else {
              // find a message to insert
              findAPlaceToInsert();
          }

          if (needWakeUp) {
              nativeWakeUp();
          }
      }

  }
#+END_SRC

** nativePoolOnce
mLooper->pollonce()
** Looper.cpp
/system/core/libutils/Looper.cpp

Looper::poolOnce
int eventCount = epoll_wait(mEpollFd.get(), eventItems, EPOLL_MAX_EVENTS, timeoutMillis);
